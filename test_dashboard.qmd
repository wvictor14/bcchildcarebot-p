---
title: "BC Child Care Vacancies"
author: "Victor Yuan"
format: dashboard
server: shiny
---

```{python}
#| context: setup
import seaborn as sns
import pandas as pd
from datetime import datetime, timedelta
from shiny import reactive
from shiny.express import render, ui
penguins = sns.load_dataset("penguins")
```

```{python}
#| context: setup
# read in bc child care data ----
url = 'https://catalogue.data.gov.bc.ca/dataset/4cc207cc-ff03-44f8-8c5f-415af5224646/resource/9a9f14e1-03ea-4a11-936a-6e77b15eeb39/download/childcare_locations.csv'
bccc = pd.read_csv(url)
#.today <- lubridate::today(tzone = 'Canada/Pacific')
.today = datetime.today().strftime('%Y-%m-%d')
```

```{python setup_tbl_data}
#| include: false
# latest vacancy update
bccc['VACANCY_LAST_UPDATE'] = pd.to_datetime(
    bccc['VACANCY_LAST_UPDATE'], 
    format = '%Y/%m/%d', 
    errors = 'coerce'
)


# filter to last vacancy update - n days
dataset_last_update = bccc['VACANCY_LAST_UPDATE'].max()
updated_last_n_days = bccc['VACANCY_LAST_UPDATE'] >= \
    (dataset_last_update - timedelta(days = 3+1))
bccc_most_updated = bccc[updated_last_n_days]

# select columns
bccc_most_updated[[
    'SERVICE_TYPE_CD', 'NAME', 'ADDRESS_1', 'ADDRESS_2', 'CITY', 'PHONE', 
    'WEBSITE', 'EMAIL', 'LONGITUDE', 'LATITUDE', 'ECE_CERTIFICATION_YN', 
    'ELF_PROGRAMMING_YN', 'IS_INCOMPLETE_IND','IS_CCFRI_AUTH']].\
    join(bccc_most_updated.filter(regex='LANG'))
column_to_move = 'NAME'
columns = [column_to_move] + \
    [col for col in bccc_most_updated.columns if col != column_to_move]
bccc_most_updated = bccc_most_updated[columns]

tbl_data <- bccc |>
  
  # filter to last vacancy update - n days
  filter(
    VACANCY_LAST_UPDATE >= dataset_last_update -1 -7
  )  |> 
  
  # filter columns
  select(
    SERVICE_TYPE_CD:CITY, 
    PHONE:EMAIL,
    LONGITUDE, LATITUDE,
    
    # certs
    ECE_CERTIFICATION_YN,
    ELF_PROGRAMMING_YN,
    IS_INCOMPLETE_IND, IS_CCFRI_AUTH,
    #    contains('OP_'),
    #   contains('SRVC_'),
    contains('LANG_'),
    contains('VACANCY_') ) |> 
  
  select(NAME, everything()) |>
  
  
  mutate(
    popup = glue::glue(
      "<b>{NAME}</b>",
      "{SERVICE_TYPE_CD}", 
      "{PHONE}",
      "<br>Vacancy:", 
      "&nbsp;&nbsp;&nbsp;&nbsp;<36 months: {VACANCY_SRVC_UNDER36}",
      "&nbsp;&nbsp;&nbsp;&nbsp;30 months -- 5 years: {VACANCY_SRVC_30MOS_5YRS}",
      "&nbsp;&nbsp;&nbsp;&nbsp;Preschool: {VACANCY_SRVC_LICPRE}",
      "&nbsp;&nbsp;&nbsp;&nbsp;Grade 1 - Age 12: {VACANCY_SRVC_OOS_GR1_AGE12}",
      .sep = "<br>"
    )
  ) |> 
  
  # crosstalk key
  mutate(id = row_number()) |> 
  
  # clean vacancy and other binary columns for filters
  
  # if yes, replace with vacancy type, otherwise leave as NA
  # NA will not show as a choice
  pivot_longer(
    cols =  c(
      contains('VACANCY_SRVC_'), 
      contains('LANG_'),
      ECE_CERTIFICATION_YN,
      ELF_PROGRAMMING_YN,
      IS_CCFRI_AUTH,
      IS_INCOMPLETE_IND
    ),
    names_to = 'name',
    values_to = 'value'
  ) |> 
  mutate(
    value = ifelse(
      value == 'Y', 
      str_remove_all(name, '^VACANCY_SRVC_') |> 
        str_remove_all('^LANG_') |> 
        str_remove_all('_YN$'),
      NA
    ),
    value = case_when(
      value == 'ECE_CERTIFICATION' ~ 'Early Childhood Educator (ECE)',
      value == 'ELF_PROGRAMMING' ~ 'ELF',
      value == 'IS_CCFRI_AUTH' ~ 'CCFRI authorized',
      
      value == '30MOS_5YRS' ~ "30 months - 5 years",
      value == 'UNDER36' ~ 'Under 36 months',
      value == 'LICPRE' ~ 'Licensed Pre-school',
      value == 'OOS_GR1_AGE12' ~ 'Grade 1 - Age 12',
      .default = value
    )
  ) |>
  pivot_wider(names_from = name, values_from = value)
```

# {.sidebar}



```{python}
species = list(penguins["species"].value_counts().index)
ui.input_checkbox_group(
    "species", "Species:",
    species, selected = species
)

islands = list(penguins["island"].value_counts().index)
ui.input_checkbox_group(
    "islands", "Islands:",
    islands, selected = islands
)

@reactive.calc
def filtered_penguins():
    data = penguins[penguins["species"].isin(input.species())]
    data = data[data["island"].isin(input.islands())]
    return data
```

```{python}
ui.input_select("dist", "Distribution:", choices=["kde", "hist"])
ui.input_checkbox("rug", "Show rug marks", value = False)
```

[Learn more](https://pypi.org/project/palmerpenguins/) about the
Palmer Penguins dataset.

# Plots

```{python}
@render.plot
def depth():
    return sns.displot(
        filtered_penguins(), x = "bill_depth_mm",
        hue = "species", kind = input.dist(),
        fill = True, rug=input.rug()
    )
```

```{python}
@render.plot
def length():
    return sns.displot(
        filtered_penguins(), x = "bill_length_mm",
        hue = "species", kind = input.dist(),
        fill = True, rug=input.rug()
    )
```

# Data

```{python}
@render.data_frame
def dataview():
    return render.DataGrid(filtered_penguins())
```